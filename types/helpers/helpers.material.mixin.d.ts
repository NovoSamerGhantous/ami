declare var _default: {
    new (): {
        _createMaterial(extraOptions: any): void;
        _material: ShaderMaterial;
        _updateMaterial(): void;
        _prepareTexture(): void;
        _textures: any[];
        id: number;
        uuid: string;
        name: string;
        type: string;
        parent: Object3D<import("three").Event>;
        children: Object3D<import("three").Event>[];
        up: import("three").Vector3;
        readonly position: import("three").Vector3;
        readonly rotation: import("three").Euler;
        readonly quaternion: import("three").Quaternion;
        readonly scale: import("three").Vector3;
        readonly modelViewMatrix: import("three").Matrix4;
        readonly normalMatrix: import("three").Matrix3;
        matrix: import("three").Matrix4;
        matrixWorld: import("three").Matrix4;
        matrixAutoUpdate: boolean;
        matrixWorldNeedsUpdate: boolean;
        layers: import("three").Layers;
        visible: boolean;
        castShadow: boolean;
        receiveShadow: boolean;
        frustumCulled: boolean;
        renderOrder: number;
        animations: import("three").AnimationClip[];
        userData: {
            [key: string]: any;
        };
        customDepthMaterial: import("three").Material;
        customDistanceMaterial: import("three").Material;
        readonly isObject3D: true;
        onBeforeRender: (renderer: import("three").WebGLRenderer, scene: import("three").Scene, camera: import("three").Camera, geometry: import("three").BufferGeometry, material: import("three").Material, group: import("three").Group) => void;
        onAfterRender: (renderer: import("three").WebGLRenderer, scene: import("three").Scene, camera: import("three").Camera, geometry: import("three").BufferGeometry, material: import("three").Material, group: import("three").Group) => void;
        applyMatrix4(matrix: import("three").Matrix4): void;
        applyQuaternion(quaternion: import("three").Quaternion): any;
        setRotationFromAxisAngle(axis: import("three").Vector3, angle: number): void;
        setRotationFromEuler(euler: import("three").Euler): void;
        setRotationFromMatrix(m: import("three").Matrix4): void;
        setRotationFromQuaternion(q: import("three").Quaternion): void;
        rotateOnAxis(axis: import("three").Vector3, angle: number): any;
        rotateOnWorldAxis(axis: import("three").Vector3, angle: number): any;
        rotateX(angle: number): any;
        rotateY(angle: number): any;
        rotateZ(angle: number): any;
        translateOnAxis(axis: import("three").Vector3, distance: number): any;
        translateX(distance: number): any;
        translateY(distance: number): any;
        translateZ(distance: number): any;
        localToWorld(vector: import("three").Vector3): import("three").Vector3;
        worldToLocal(vector: import("three").Vector3): import("three").Vector3;
        lookAt(vector: number | import("three").Vector3, y?: number, z?: number): void;
        add(...object: Object3D<import("three").Event>[]): any;
        remove(...object: Object3D<import("three").Event>[]): any;
        removeFromParent(): any;
        clear(): any;
        attach(object: Object3D<import("three").Event>): any;
        getObjectById(id: number): Object3D<import("three").Event>;
        getObjectByName(name: string): Object3D<import("three").Event>;
        getObjectByProperty(name: string, value: string): Object3D<import("three").Event>;
        getWorldPosition(target: import("three").Vector3): import("three").Vector3;
        getWorldQuaternion(target: import("three").Quaternion): import("three").Quaternion;
        getWorldScale(target: import("three").Vector3): import("three").Vector3;
        getWorldDirection(target: import("three").Vector3): import("three").Vector3;
        raycast(raycaster: import("three").Raycaster, intersects: import("three").Intersection<Object3D<import("three").Event>>[]): void;
        traverse(callback: (object: Object3D<import("three").Event>) => any): void;
        traverseVisible(callback: (object: Object3D<import("three").Event>) => any): void;
        traverseAncestors(callback: (object: Object3D<import("three").Event>) => any): void;
        updateMatrix(): void;
        updateMatrixWorld(force?: boolean): void;
        updateWorldMatrix(updateParents: boolean, updateChildren: boolean): void;
        toJSON(meta?: {
            geometries: any;
            materials: any;
            textures: any;
            images: any;
        }): any;
        clone(recursive?: boolean): any;
        copy(source: any, recursive?: boolean): any;
        addEventListener<T extends string>(type: T, listener: import("three").EventListener<import("three").Event, T, any>): void;
        hasEventListener<T_1 extends string>(type: T_1, listener: import("three").EventListener<import("three").Event, T_1, any>): boolean;
        removeEventListener<T_2 extends string>(type: T_2, listener: import("three").EventListener<import("three").Event, T_2, any>): void;
        dispatchEvent(event: import("three").Event): void;
    };
    DefaultUp: import("three").Vector3;
    DefaultMatrixAutoUpdate: boolean;
};
export default _default;
export function helpersMaterialMixin(): {
    new (): {
        _createMaterial(extraOptions: any): void;
        _material: ShaderMaterial;
        _updateMaterial(): void;
        _prepareTexture(): void;
        _textures: any[];
        id: number;
        uuid: string;
        name: string;
        type: string;
        parent: Object3D<import("three").Event>;
        children: Object3D<import("three").Event>[];
        up: import("three").Vector3;
        readonly position: import("three").Vector3;
        readonly rotation: import("three").Euler;
        readonly quaternion: import("three").Quaternion;
        readonly scale: import("three").Vector3;
        readonly modelViewMatrix: import("three").Matrix4;
        readonly normalMatrix: import("three").Matrix3;
        matrix: import("three").Matrix4;
        matrixWorld: import("three").Matrix4;
        matrixAutoUpdate: boolean;
        matrixWorldNeedsUpdate: boolean;
        layers: import("three").Layers;
        visible: boolean;
        castShadow: boolean;
        receiveShadow: boolean;
        frustumCulled: boolean;
        renderOrder: number;
        animations: import("three").AnimationClip[];
        userData: {
            [key: string]: any;
        };
        customDepthMaterial: import("three").Material;
        customDistanceMaterial: import("three").Material;
        readonly isObject3D: true;
        onBeforeRender: (renderer: import("three").WebGLRenderer, scene: import("three").Scene, camera: import("three").Camera, geometry: import("three").BufferGeometry, material: import("three").Material, group: import("three").Group) => void;
        onAfterRender: (renderer: import("three").WebGLRenderer, scene: import("three").Scene, camera: import("three").Camera, geometry: import("three").BufferGeometry, material: import("three").Material, group: import("three").Group) => void;
        applyMatrix4(matrix: import("three").Matrix4): void;
        applyQuaternion(quaternion: import("three").Quaternion): any;
        setRotationFromAxisAngle(axis: import("three").Vector3, angle: number): void;
        setRotationFromEuler(euler: import("three").Euler): void;
        setRotationFromMatrix(m: import("three").Matrix4): void;
        setRotationFromQuaternion(q: import("three").Quaternion): void;
        rotateOnAxis(axis: import("three").Vector3, angle: number): any;
        rotateOnWorldAxis(axis: import("three").Vector3, angle: number): any;
        rotateX(angle: number): any;
        rotateY(angle: number): any;
        rotateZ(angle: number): any;
        translateOnAxis(axis: import("three").Vector3, distance: number): any;
        translateX(distance: number): any;
        translateY(distance: number): any;
        translateZ(distance: number): any;
        localToWorld(vector: import("three").Vector3): import("three").Vector3;
        worldToLocal(vector: import("three").Vector3): import("three").Vector3;
        lookAt(vector: number | import("three").Vector3, y?: number, z?: number): void;
        add(...object: Object3D<import("three").Event>[]): any;
        remove(...object: Object3D<import("three").Event>[]): any;
        removeFromParent(): any;
        clear(): any;
        attach(object: Object3D<import("three").Event>): any;
        getObjectById(id: number): Object3D<import("three").Event>;
        getObjectByName(name: string): Object3D<import("three").Event>;
        getObjectByProperty(name: string, value: string): Object3D<import("three").Event>;
        getWorldPosition(target: import("three").Vector3): import("three").Vector3;
        getWorldQuaternion(target: import("three").Quaternion): import("three").Quaternion;
        getWorldScale(target: import("three").Vector3): import("three").Vector3;
        getWorldDirection(target: import("three").Vector3): import("three").Vector3;
        raycast(raycaster: import("three").Raycaster, intersects: import("three").Intersection<Object3D<import("three").Event>>[]): void;
        traverse(callback: (object: Object3D<import("three").Event>) => any): void;
        traverseVisible(callback: (object: Object3D<import("three").Event>) => any): void;
        traverseAncestors(callback: (object: Object3D<import("three").Event>) => any): void;
        updateMatrix(): void;
        updateMatrixWorld(force?: boolean): void;
        updateWorldMatrix(updateParents: boolean, updateChildren: boolean): void;
        toJSON(meta?: {
            geometries: any;
            materials: any;
            textures: any;
            images: any;
        }): any;
        clone(recursive?: boolean): any;
        copy(source: any, recursive?: boolean): any;
        addEventListener<T extends string>(type: T, listener: import("three").EventListener<import("three").Event, T, any>): void;
        hasEventListener<T_1 extends string>(type: T_1, listener: import("three").EventListener<import("three").Event, T_1, any>): boolean;
        removeEventListener<T_2 extends string>(type: T_2, listener: import("three").EventListener<import("three").Event, T_2, any>): void;
        dispatchEvent(event: import("three").Event): void;
    };
    DefaultUp: import("three").Vector3;
    DefaultMatrixAutoUpdate: boolean;
};
import { ShaderMaterial } from "three/src/materials/ShaderMaterial";
import { Object3D } from "three/src/core/Object3D";
//# sourceMappingURL=helpers.material.mixin.d.ts.map